<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System.Data.Entity.ModelConfiguration;

namespace <#= RootNamespace #>.Data.Models.Mapping
{
    public class <#= Model.Singular #>Map : EntityTypeConfiguration<<#= Model.Singular #>>
    {
        public <#= Model.Singular #>Map()
        {
            // Primary Key
            this.HasKey(t => t.Id);

            // Properties

<#
    foreach(Model.FieldInfo field in Model.Fields) {
#>
            this.Property(t => t.<#= field.Name #>)<#= field.Required ? ".IsRequired()" : "" #><#= (field.Type == "string" ? ".HasMaxLength(" + (string.IsNullOrEmpty(field.Length) ? "255" : field.Length) +  ")" : "") #>;

<#
    }
#>
            // Table & Column Mappings

            this.ToTable("<#= Model.Plural #>");
            this.Property(t => t.Id).HasColumnName("Id");
<#
    foreach(Model.FieldInfo field in Model.Fields) {
#>
            this.Property(t => t.<#= field.Name #>).HasColumnName("<#= field.Name #>");
<#
    }
#>

            // Relationships
<#
    foreach(Model.FieldInfo field in Model.Fields) {
        if(!string.IsNullOrEmpty(field.FkSingular)) {
#>
            this.Has<#= (field.Type == "int" ? "Required" : "Optional") #>(t => t.<#= field.FkSingular #>)
                .WithMany(t => t.<#= Model.Plural #>)
                .HasForeignKey(d => d.<#= field.Name #>);

<#
        }
    }

    if(Model.CollectionModel != null && Model.CollectionModel.Any()) {
		foreach(Model.ModelInfo model in Model.CollectionModel) {
#>
            this.HasMany(e => e.<#= model.Plural #>)
                .WithOptional(e => e.<#= Model.Singular #>)
                .WillCascadeOnDelete(false);

<#
        }
	}
#>
        }
    }
}